import React, { useState, useEffect } from "react";
import { connect } from "react-redux";
import { useRouter } from "next/router";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import Box from "@mui/material/Box";
import TextField from "@mui/material/TextField";
import Button from "@mui/material/Button";
import ArrowBackTwoToneIcon from "@mui/icons-material/ArrowBackTwoTone";
import IconButton from "@mui/material/IconButton";
import Modal from "@mui/material/Modal";
import Typography from "@mui/material/Typography";

function page2(props) {
	const router = useRouter();
	const [age, setAge] = useState();
	const [gender, setGender] = useState();
	const [prob, setProb] = useState();
	const [open, setOpen] = useState(false);

	const toggleOverlay = () => setOpen(!open);
	const handleClose = () => setOpen(false);

	//* Triggers nav or error message if missing fields.
	function handleSubmit() {
		if (age || props.age) {
			props.addSpecs(age, gender);
			router.push(`/page3`);
		} else {
			toggleOverlay();
		}
	}

	//* Sets default values if inputs have already been filled in.
	//* Calls API to get gender through firstName from query Url.
	//* Updates local states
	useEffect(() => {
		props.age? setAge(props.age) : setAge(age);
		async function loadGenderize() {
			var rawResponse = await fetch(
				`https://api.genderize.io?name=${props.firstName}`
			);
			console.log("raw", rawResponse);
			var response = await rawResponse.json();
			console.log("genderize response", response);
			rawResponse.ok ? setGender(response.gender) : setGender("unknown");
			rawResponse.ok ? setProb(response.probability * 100) : setProb("unknown");
		}
		loadGenderize();
	}, []);

	//* Modifies text after checking result status from API
	var result;
	if (gender == "unknown" || props.firstName) {
		result = `No result found for ${props.firstName}`;
	} else {
		result = `Result for ${props.firstName}`;
	}

	return (
		<div className={styles.container}>
			<Head>
				<title>Genderize me!</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/img/equality.png" />
			</Head>
			<Modal
				keepMounted
				open={open}
				onClose={handleClose}
				aria-labelledby="keep-mounted-modal-title"
				aria-describedby="keep-mounted-modal-description"
			>
				<Box
					sx={{
						position: "absolute",
						top: "50%",
						left: "50%",
						transform: "translate(-50%, -50%)",
						width: 400,
						backgroundColor: "white",
						borderRadius: "5px",
						boxShadow: 24,
						p: 4,
						color: "red",
						textAlign: "center",
					}}
				>
					<Typography
						style={{ fontWeight: "bold" }}
						id="keep-mounted-modal-title"
						variant="h6"
						component="h2"
					>
						Error
					</Typography>
					<Typography id="keep-mounted-modal-description" sx={{ mt: 2 }}>
						Please fill in your age.
					</Typography>
				</Box>
			</Modal>
			<main className={styles.main}>
				<IconButton className={styles.backArrow} onClick={() => router.back()}>
					<ArrowBackTwoToneIcon />
				</IconButton>
				<button type="button" onClick={() => router.back()} />
				<video
					autoPlay
					muted
					loop
					className={styles.video}
					src="/video.mp4"
					type="video/mp4"
				></video>
				<div className={styles.formBox}>
					<div style={{ textAlign: "center" }}>
						<h1 id="title">Result for: {props.firstName}</h1>
					</div>
					<div className={styles.formBoxP2}>
						<div>
							<p>
								<span style={{ fontWeight: "bold" }}>Gender: </span> {gender}
							</p>
							<p>
								<span style={{ fontWeight: "bold" }}>Probability: </span>
								{prob}%
							</p>
						</div>
						<Box style={{ marginLeft: 20 }}>
							<TextField
								sx={{
									".MuiInputLabel-root": { color: "white" },
									input: {
										color: "white",
										borderRadius: 1,
										textAlign: "center",
									},
									"& label": { color: "white" },
								}}
								id="outlined-basic"
								label="Age"
								variant="outlined"
								color="error"
								defaultValue={props.age? props.age : ''}
								onChange={(e) => {
									setAge(e.target.value);
									console.log("yolooo", age);
								}}
								value={props.age? props.age : age}
							/>
						</Box>
					</div>

					<div>
						<Button
							variant="contained"
							color="error"
							onClick={() => {
								console.log(age);
								handleSubmit();
							}}
						>
							GO NEXT
						</Button>
					</div>
				</div>
			</main>
		</div>
	);
}

function mapDispatchToProps(dispatch) {
	return {
		addSpecs: function (age, gender) {
			dispatch({ type: "ageSubmit", age: age, gender: gender });
		},
	};
}

function mapStateToProps(state) {
	return {
		firstName: state.inputInfos.firstName,
		lastName: state.inputInfos.lastName,
		age: state.specs.age,
		gender: state.specs.gender,
	};
}

export default connect(mapStateToProps, mapDispatchToProps)(page2);
